Largest Element in Array

** Brute Force: O(nlogn)

class Solution {
  public:
    int largest(vector<int> &arr) {

        sort(arr.begin(), arr.end());
        return arr[arr.size() - 1];

    }
};

** Optimized: O(n)

class Solution {
  public:
    int largest(vector<int> &arr) {

        int max = arr[0];
        for (int i = 1; i < arr.size(); i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
};

===============================================================

Second Largest Element in an Array without sorting

** Brute Force: O(nlogn)
    sort the array
    reyurn arr[arr.size()-2]

** Better Approach: O(2*n)

    class Solution {
    public:
        int print2largest(vector<int> &arr) {
            int n = arr.size();
            int largest = -1, sLargest = -1;
            for(int i=0;i<n;i++){
                if(arr[i]>largest){
                    largest=arr[i];
                }
            }
            for(int i=0;i<n;i++){
                if(arr[i]>sLargest && arr[i]<largest){
                    sLargest=arr[i];
                }
            }
        return sLargest;
        }
    };

** Optimized: O(n)

class Solution {
  public:
    // Function returns the second
    // largest elements
    int print2largest(vector<int> &arr) {
        // Code Here
        int largest=-1,sLargest=-1;
        int n=arr.size();
        for(int i=0;i<n;i++){
            if(arr[i]>largest){
                sLargest=largest;
                largest=arr[i];
            }
            if(arr[i]<largest){
                if(arr[i]>sLargest){
                    sLargest=arr[i];
                }
            }
        }
        return sLargest;
        
    }
};

===============================================================

1752. Check if Array Is Sorted and Rotated

** Optimal O(n)
class Solution {
public:
    bool check(vector<int>& nums) {
        int n=nums.size();
        int cnt=0;
        for(int i=0;i<n;i++){
            if(nums[i]>nums[(i+1)%n]){
                cnt++;
            }
            if(cnt>1){
                return false;
            }       
        }
        return true;
    }
};
===============================================================

Remove Duplicates from Sorted Array

** Bruteforce: -- TC: O(n*log(n)) -- SC O(n)
    remove duplicates using set

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        set<int>st(nums.begin(),nums.end()); //SC: O(n) TC: O(nlogn) 
        
        int i=0;
        for(auto x:st){
            nums[i]=x;
            i++;
        }
        return st.size();
    }
};

Optimal: -- TC: O(n) -- SC O(1)

class Solution {
    public:
        int removeDuplicates(vector<int> &nums) {
            if (nums.size() == 0) {
                return 0;
            }
            int i = 0;
            for (int j = 1; j < nums.size(); j++) {
                if (nums[j] != nums[i]) {
                    i++;
                    nums[i] = nums[j];
                }
            }
            return i + 1;
        }
    };    


===============================================================

Left Rotate an array by one place

Brute Force: -- TC: O(n) -- SC O(n)

vector<int> rotateArray(vector<int>& arr, int n) {
    int temp = arr[0];
    vector<int> res;
    for (int i = 1; i < n; i++) {
        res.push_back(arr[i]);
    }
    res.push_back(temp);
    return res;
}

Optimal: -- TC: O(n) -- SC O(1)

vector<int> rotateArray(vector<int>& arr, int n) {
    int temp = arr[0];
    for (int i = 1; i < n; i++) {
        arr[i - 1] = arr[i];
    }
    arr[n - 1] = temp;
    return arr;
}

===============================================================

Rotate Array

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k=k%n;
        reverse(nums.begin(),nums.begin()+n-k); // Reverse the first n - k elements
        reverse(nums.begin()+n-k,nums.end());// Reverse the remaining k elements
        reverse(nums.begin(),nums.end()); // Reverse the entire array
    }
};

===============================================================

Move Zeroes

// optimal in onepass
class Solution {
public:
    void moveZeroes(vector<int>& arr) {
        int n=arr.size();
        int j=0;
        for(int i=0;i<n;i++){
            if(arr[i]!=0){
                swap(arr[i],arr[j]);
                j++;
            }
        }
    }
};


// optimal yet can be optimizezd;
class Solution {
public:
    void moveZeroes(vector<int>& arr) {
        int n=arr.size();
        int j=0;
        for(int i=0;i<n;i++){
            if(arr[i]!=0){
                arr[j]=arr[i];
                j++;
            }
        }
        while(j<n){
            arr[j]=0;
            j++;
        }
        
    }
};

===============================================================

Linear Search

** Brute Force: TC: O(n) -- SC: O(1)

class Solution {
  public:
    int searchInSorted(int arr[], int n, int k) {
        // Your code here
        for(int i=0;i<n;i++)
        {
            if(arr[i]==k){
                return 1;
            }
        }
        return -1;
    }
};

** Optimized: TC: O(logn) -- SC: O(1)

class Solution {
  public:
    int searchInSorted(int arr[], int n, int k) {
        // Your code here
        int low=0,high=n-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(arr[mid]==k){
                return 1;
            }
            else if(arr[mid]>k){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return -1;
    }
};

===============================================================

Union of Two Sorted Arrays

** Brute Force: O(nlogn) -- SC: O(n)
vector<int> findUnion(int arr1[], int arr2[], int n, int m)
{
    set<int>st;
    for(int i=0;i<n;i++){
        st.insert(arr1[i]);
    }
    for(int i=0;i<m;i++){
        st.insert(arr2[i]);
    }
    vector<int>res;
    for(auto x:st){
        res.push_back(x);
    }
    return res;
}


** Optimized: O(n+m) -- SC: O(1)
Two Pointer Approach

vector<int> findUnion(int arr1[], int arr2[], int n, int m){
    int i=0,j=0;
    vector<int>res;
    while(i<n && j<m){
        if(i>0 && arr1[i]==arr1[i-1]){
            i++;
            continue;
        }
        if(j>0 && arr2[j]==arr2[j-1]){
            j++;
            continue;
        }
        if(arr1[i]<arr2[j]){
            res.push_back(arr1[i]);
            i++;
        }
        else if(arr1[i]>arr2[j]){
            res.push_back(arr2[j]);
            j++;
        }
        else{
            res.push_back(arr1[i]);
            i++;
            j++;
        }
    }
}
===============================================================

Missing Number in Array

** Brute Force: O(n) -- SC: O(n)

class Solution {
  public:
    int MissingNumber(vector<int> &arr, int n) {
        // Your code goes here
        set<int>st(arr.begin(),arr.end());
        for(int i=1;i<=n;i++){
            if(st.find(i)==st.end()){
                return i;
            }
        }
        return n+1;
    }
};

** Better Approach: O(n) -- SC: O(1)

class Solution {
  public:
    int MissingNumber(vector<int> &arr, int n) {
        // Your code goes here
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
        }
        return (n*(n+1)/2)-sum;
    }
};

** Optimal: O(n) -- SC: O(1)
** Constraints:
**
** n == nums.length
** 1 <= n <= 10^4
** 0 <= nums[i] <= n
** 
** arr [0,1,2,4,5]
** 
** x1 0^1^2^3^4^5 : 0 to n
** x2 0^1^2^4^5   : which we have in our array
** 
** return x1^x2

class Solution {
  public:
    int missingNumber(vector<int> &arr) {
        // Your code goes here
        int n=arr.size();
        int x1=0;
        for(int i=1;i<=n;i++){
            x1=x1^i;
        }

        int x2=arr[0];
        for(int i=1;i<n;i++){
            x2=x2^arr[i];
        }
        
        return x2^x1;
    }
};

===============================================================

Max Consecutive Ones

Optimal: TC: O(n) -- SC: O(1)

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int maxx=0;int cnt=0;int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]==1){
                cnt++;
                maxx=max(maxx,cnt);
            }else{
                cnt=0;
            }
        }
        return maxx;
    }
};

===============================================================

Find the number that appears once, and other numbers twice.

** optimal: O(n) -- SC: O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            ans=ans^nums[i];
        }
        return ans;
    }
};


