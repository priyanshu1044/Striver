Binary Search

** Brute Force: TC: O(n) -- SC: O(1)
int search(vector<int>& nums, int target) {
    for(int i=0;i<nums.size();i++)
    {
        if(nums[i]==target){
            return i;
        }
    }
    return -1;
}

** Optimized: TC: O(logn) -- SC: O(1)
int search(vector<int>& nums, int target) {
    int start=0;
    int end=nums.size()-1;
    int mid;
    while (start <= end)
    {
        mid = start + (end-start)/ 2;

        if (nums[mid] == target)
            return mid ;

        else if (nums[mid] < target)
            start = mid + 1;

        else
            end = mid - 1;
    }

    return -1;
}
===============================================================

Implement Lower Bound :
    x gretaer than or equal to target (>=)

#include <bits/stdc++.h>
int lowerBound(vector<int> arr, int n, int x) {
	return lower_bound(arr.begin(),arr.end(),x)-arr.begin();
}

int lowerBound(vector<int> arr, int n, int x) {
	// Write your code here
	int low=0;int high=n-1;
	int ans=n;int mid;
	while(low<=high){
		mid = low + (high-low)/ 2;

		if(arr[mid]>=x){
			ans=mid;
			high=mid-1;
		}else{
			low=mid+1;
		}
	}
	return ans;
}

===============================================================

Implement Upper Bound
    x greater than target (>)


int upperBound(vector<int> &arr, int x, int n) {
    int low = 0, high = n - 1, mid;
    int ans = n;  // Initialize ans to n as a default

    while (low <= high) {
        mid = (high + low) / 2;

        if (arr[mid] > x) {
            ans = mid;       // Potential answer found
            high = mid - 1;  // Search left half
        } else {
            low = mid + 1;   // Search right half
        }
    }

    return ans;
}
===============================================================
	
Search Insert Position

int idx = lower_bound(nums.begin(), nums.end(), target) - nums.begin();

===============================================================

Floor/Ceil in Sorted Array

int floor(vector<int> &nums, int target) {
    int low = 0, high = nums.size() - 1, mid;
    int ans = -1;

    while (low <= high) {
        mid = low + (high - low) / 2;

        if (nums[mid] <= target) {
            ans = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return ans;
}

int ceil(vector<int> &nums, int target) {
    int low = 0, high = nums.size() - 1, mid;
    int ans = -1;

    while (low <= high) {
        mid = low + (high - low) / 2;

        if (nums[mid] >= target) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    return ans;
}

pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
    int floorAns = floor(a, x);
    int ceilAns = ceil(a, x);

    return {a[floorAns], a[ceilAns]};
}
===============================================================
Find First and Last Position of Element in Sorted Array

** Brute Force: TC: O(n) -- SC: O(1)
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int firstPosition=-1;
        int lastPosition=-1;
        for(int i=0;i<n;i++){
            if(nums[i]==target){
                if(firstPosition==-1) firstPosition=i;
                lastPosition = i;
            }
        }
        return {firstPosition,lastPosition};
    }

// // Better Solution
// // using lowerbound upperbound
// // lower bound= arr[i]>=x
// // upper bound= arr[i]>x
    int lowerbound(vector<int>& nums, int n, int target){
        int low=0,high=n-1,ans=n;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            
            if(nums[mid]>=target){
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        
        return ans;
    }
    int upperbound(vector<int>& nums, int n, int target){
        int low=0,high=n-1,ans=n;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            
            if(nums[mid]>target){
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int lb=lowerbound(nums,n,target);
        int ub=upperbound(nums,n,target);
        if(lb>=n||nums[lb]!=target) {
            return {-1,-1};
        }
        return {lb,ub-1};
    }


===============================================================

Count occurrences of a number in a sorted array with duplicates

** Brute Force: TC: O(n) -- SC: O(1)
    int count(vector<int>& nums, int target) {
        int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++){
            if(nums[i]==target){
                count++;
            }
        }
        return count;
    }

** Better Solution: TC: O(logn) -- SC: O(1)
    int lowerbound(vector<int>& nums, int n, int target){
        int low=0,high=n-1,ans=n;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            
            if(nums[mid]>=target){
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        
        return ans;
    }
    int upperbound(vector<int>& nums, int n, int target){
        int low=0,high=n-1,ans=n;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            
            if(nums[mid]>target){
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        
        return ans;
    }
    int count(vector<int>& nums, int target) {
        int n=nums.size();
        int lb=lowerbound(nums,n,target);
        int ub=upperbound(nums,n,target);
        return ub-lb;
    }

===============================================================
33. Search in Rotated Sorted Array

** Brute Force: TC: O(n) -- SC: O(1)

    int search(vector<int>& nums, int target) {
        for(int i=0;i<nums.size();i++){
            if(nums[i]==target){
                return i;
            }
        }
        return -1;
    }

** Better Approach: TC: O(2* logn) -- SC: O(1)

    int bSearch(vector<int>& nums, int low, int high, int target){
        while(low<=high){
            int mid=low+(high-low)/2;
            
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]<target){
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int breakpoint;
        for(int i=1;i<n;i++){
            if(nums[i]<nums[i-1]){
                breakpoint=i;
                break;
            }
        }
        int low1=0, high1=breakpoint-1;
        int low2=breakpoint, high2=n-1;
        
        int ans1=bSearch(nums,low1,high1,target);
        int ans2=bSearch(nums,low2,high2,target);

        if(ans1!=-1){
            return ans1;
        }else if(ans2!=-1){
            return ans2;
        }    
        return -1;
    }

** Optimal Approach: TC: O(logn) -- SC: O(1)

    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0,high=n-1,mid;

        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]==target){
                return mid;
            }
            // check that left part is sorted or not
            if(nums[low]<=nums[mid]){
                // check that target is lies in that part or not
                if(nums[low]<=target && target<=nums[mid]){
                    high=mid-1;
                }else{
                    low=mid+1;
                }
            // check that right part is sorted or not
            }else{
                if(nums[mid]<=target && target<=nums[high]){
                    low=mid+1;
                }else{
                    high=mid-1;
                }
            }
        }
        return -1;
    }


===============================================================
	
Search in Rotated Sorted Array II

** Brute Force: TC: O(n) -- SC: O(1)

    bool search(vector<int>& nums, int target) {
        for(int i=0;i<nums.size();i++){
            if(nums[i]==target){
                return true;
            }
        }
        return false;
    }

** Better Approach: TC: O(2* logn) -- SC: O(1)


===============================================================

===============================================================

===============================================================

===============================================================

===============================================================
	
Find square root of a number in log n

** Brute Force: TC: O(n) -- SC: O(1)
    
class Solution {
  public:
    long long int floorSqrt(long long int n) {
        // Your code goes here
        int ans=-1;
        for(int i=0;i<=n;i++){
            if(i*i<=n){
                ans=i;
            }else{
                break;
            }
        }
        return ans;
    }
};

** Better Approach: TC: O(logn) -- SC: O(1)

class Solution {
  public:
    long long int floorSqrt(long long int n) {
        // Your code goes here
        long long int low=1,high=n,mid,ans=1;
        while(low<=high){
            mid=(high+low)/2;
            
            if(mid*mid<=n){
                ans=mid;
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        
        return ans;
    }
};
===============================================================

Find the Nth root of a number using binary search

** Brute Force: TC: O(n root(n)) -- SC: O(1)
class Solution{
	public:
	int NthRoot(int n, int m)
	{
	    for(int i=1;i<= m;i++){
	        if(pow(i,n)==m){
	            return i;
	        }else if(pow(i,n)>m){
	            break;
	        }
	    }
	    return -1;
	}  
};

**  
===============================================================
Koko Eating Bananas

class Solution {
public:
    int func(vector<int>& piles,int h){
        int n=piles.size();
        int totalhrs=0;
        for(int i=0;i<n;i++){
            // totalhrs+=ceil((double)piles[i]/(double)h);
            totalhrs += (piles[i] + h - 1) / h;

        }
        return totalhrs;
    }
    
    int minEatingSpeed(vector<int>& piles, int h) {
        int low=1,mid,high = *max_element(piles.begin(), piles.end());

        int ans=INT_MAX;
        while(low<=high){
            mid = low + (high - low) / 2;
            int totalhrs=func(piles,mid);
            if(totalhrs<=h){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;
    }
};
===============================================================
1482. Minimum Number of Days to Make m Bouquets


//Optimal : O(log2(maxi-mini+1)*n)
class Solution {
public:
    
    bool possible(vector<int>& bloomDay, int day, int m, int k){
        int cnt=0;int noOfBouquets=0;
        int n=bloomDay.size();
        for(int i=0;i<n;i++){
            if(bloomDay[i]<=day){ //Blooming is Possible 
                cnt++;
            }
            else{
                noOfBouquets+=cnt/k;
                cnt=0; // if consicutive flower is not there make count set to 0
            }
        }
        noOfBouquets+=cnt/k;
        if(noOfBouquets>=m){
            return true;
        }
        return false;
    }
    
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n=bloomDay.size();
        int low=*min_element(bloomDay.begin(),bloomDay.end());
        int high=*max_element(bloomDay.begin(),bloomDay.end());
        int mid;int ans=high;
        if ((long long)m * k > n){
            return -1;
        }
        while(low<=high){
            mid=low+(high-low)/2;
            if(possible(bloomDay,mid,m,k)==true){ //it is possible so i need min day so go on the left side
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return ans;
    }
};


//Brute Force : O(maxi-mini+1)*n
class Solution {
public:
    
    bool possible(vector<int>& bloomDay, int day, int m, int k){
        int cnt=0;int noOfBouquets=0;
        int n=bloomDay.size();
        for(int i=0;i<n;i++){
            if(bloomDay[i]<=day){ //Blooming is Possible 
                cnt++;
            }
            else{
                noOfBouquets+=cnt/k;
                cnt=0; // if consicutive flower is not there make count set to 0
            }
        }
        noOfBouquets+=cnt/k;
        if(noOfBouquets>=m){
            return true;
        }
        return false;
    }
    
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n=bloomDay.size();
        int mini=*min_element(bloomDay.begin(),bloomDay.end());
        int maxi=*max_element(bloomDay.begin(),bloomDay.end());
        if(m*k>n){
            return -1;
        }
        //O(maxi-mini+1)*n
        for(int i=mini;i<=maxi;i++){
            if(possible(bloomDay,i,m,k)==true) return i;
        }
        return -1;
        
    }
};
===============================================================
1283. Find the Smallest Divisor Given a Threshold

class Solution {
public:
    // Function to calculate the sum of elements when divided by 'div'
    int sumByD(vector<int>& nums, int div) {
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += ceil((double)nums[i]/(double)div);
            // sum += (nums[i] + div - 1) / div;  // Integer math for ceiling
        }
        return sum;
    }
    
    int smallestDivisor(vector<int>& nums, int threshold) {
        int low = 1;
        int high = *max_element(nums.begin(), nums.end());
        int result = high;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int sum = sumByD(nums, mid);
            
            if (sum <= threshold) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return result;
    }
};

//Brute Force: O(maxi*n)
class Solution {
public:
    int smallestDivisor(vector<int>& nums, int threshold) {
        int n=nums.size();
        int maxi=*max_element(nums.begin(),nums.end());
        for(int d=1;d<=maxi;d++){
            int sum=0;
            for(int i=0;i<n;i++){
                sum+=ceil((double)nums[i]/d);
            }
            if(sum<=threshold){
                return d;
            }
        }
        return -1;
    }
};

===============================================================
===============================================================
===============================================================
