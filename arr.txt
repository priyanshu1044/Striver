Largest Element in Array

** Brute Force: O(nlogn)

class Solution {
  public:
    int largest(vector<int> &arr) {

        sort(arr.begin(), arr.end());
        return arr[arr.size() - 1];

    }
};

** Optimized: O(n)

class Solution {
  public:
    int largest(vector<int> &arr) {

        int max = arr[0];
        for (int i = 1; i < arr.size(); i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
};

===============================================================

Second Largest Element in an Array without sorting

** Brute Force: O(nlogn)
    sort the array
    reyurn arr[arr.size()-2]

** Better Approach: O(2*n)

    class Solution {
    public:
        int print2largest(vector<int> &arr) {
            int n = arr.size();
            int largest = -1, sLargest = -1;
            for(int i=0;i<n;i++){
                if(arr[i]>largest){
                    largest=arr[i];
                }
            }
            for(int i=0;i<n;i++){
                if(arr[i]>sLargest && arr[i]<largest){
                    sLargest=arr[i];
                }
            }
        return sLargest;
        }
    };

** Optimized: O(n)

class Solution {
  public:
    // Function returns the second
    // largest elements
    int print2largest(vector<int> &arr) {
        // Code Here
        int largest=-1,sLargest=-1;
        int n=arr.size();
        for(int i=0;i<n;i++){
            if(arr[i]>largest){
                sLargest=largest;
                largest=arr[i];
            }
            if(arr[i]<largest){
                if(arr[i]>sLargest){
                    sLargest=arr[i];
                }
            }
        }
        return sLargest;
        
    }
};

===============================================================

1752. Check if Array Is Sorted and Rotated

** Optimal O(n)
class Solution {
public:
    bool check(vector<int>& nums) {
        int n=nums.size();
        int cnt=0;
        for(int i=0;i<n;i++){
            if(nums[i]>nums[(i+1)%n]){
                cnt++;
            }
            if(cnt>1){
                return false;
            }       
        }
        return true;
    }
};
===============================================================

Remove Duplicates from Sorted Array



===============================================================


===============================================================